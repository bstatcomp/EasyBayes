/*
    EasyBayes is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    EasyBayes is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with EasyBayes.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.18.0

#include <stan/model/model_header.hpp>

namespace model_subject_trials_covariates_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_subject_trials_covariates");
    reader.add_event(41, 39, "end", "model_subject_trials_covariates");
    return reader;
}

#include <meta_header.hpp>
 class model_subject_trials_covariates : public prob_grad {
private:
    int n;
    int m;
    int s;
    int t;
    matrix_d T;
    vector<vector<int> > S;
    matrix_d C_s;
    matrix_d C_t;
public:
    model_subject_trials_covariates(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_subject_trials_covariates(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;

        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_subject_trials_covariates_namespace::model_subject_trials_covariates";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        try {
            current_statement_begin__ = 2;
            context__.validate_dims("data initialization", "n", "int", context__.to_vec());
            n = int(0);
            vals_i__ = context__.vals_i("n");
            pos__ = 0;
            n = vals_i__[pos__++];
            current_statement_begin__ = 3;
            context__.validate_dims("data initialization", "m", "int", context__.to_vec());
            m = int(0);
            vals_i__ = context__.vals_i("m");
            pos__ = 0;
            m = vals_i__[pos__++];
            current_statement_begin__ = 4;
            context__.validate_dims("data initialization", "s", "int", context__.to_vec());
            s = int(0);
            vals_i__ = context__.vals_i("s");
            pos__ = 0;
            s = vals_i__[pos__++];
            current_statement_begin__ = 5;
            context__.validate_dims("data initialization", "t", "int", context__.to_vec());
            t = int(0);
            vals_i__ = context__.vals_i("t");
            pos__ = 0;
            t = vals_i__[pos__++];
            current_statement_begin__ = 6;
            validate_non_negative_index("T", "n", n);
            validate_non_negative_index("T", "m", m);
            context__.validate_dims("data initialization", "T", "matrix_d", context__.to_vec(n,m));
            validate_non_negative_index("T", "n", n);
            validate_non_negative_index("T", "m", m);
            T = matrix_d(static_cast<Eigen::VectorXd::Index>(n),static_cast<Eigen::VectorXd::Index>(m));
            vals_r__ = context__.vals_r("T");
            pos__ = 0;
            size_t T_m_mat_lim__ = n;
            size_t T_n_mat_lim__ = m;
            for (size_t n_mat__ = 0; n_mat__ < T_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < T_m_mat_lim__; ++m_mat__) {
                    T(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 7;
            validate_non_negative_index("S", "n", n);
            validate_non_negative_index("S", "m", m);
            context__.validate_dims("data initialization", "S", "int", context__.to_vec(n,m));
            validate_non_negative_index("S", "n", n);
            validate_non_negative_index("S", "m", m);
            S = std::vector<std::vector<int> >(n,std::vector<int>(m,int(0)));
            vals_i__ = context__.vals_i("S");
            pos__ = 0;
            size_t S_limit_1__ = m;
            for (size_t i_1__ = 0; i_1__ < S_limit_1__; ++i_1__) {
                size_t S_limit_0__ = n;
                for (size_t i_0__ = 0; i_0__ < S_limit_0__; ++i_0__) {
                    S[i_0__][i_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 8;
            validate_non_negative_index("C_s", "s", s);
            validate_non_negative_index("C_s", "n", n);
            context__.validate_dims("data initialization", "C_s", "matrix_d", context__.to_vec(s,n));
            validate_non_negative_index("C_s", "s", s);
            validate_non_negative_index("C_s", "n", n);
            C_s = matrix_d(static_cast<Eigen::VectorXd::Index>(s),static_cast<Eigen::VectorXd::Index>(n));
            vals_r__ = context__.vals_r("C_s");
            pos__ = 0;
            size_t C_s_m_mat_lim__ = s;
            size_t C_s_n_mat_lim__ = n;
            for (size_t n_mat__ = 0; n_mat__ < C_s_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < C_s_m_mat_lim__; ++m_mat__) {
                    C_s(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 9;
            validate_non_negative_index("C_t", "t", t);
            validate_non_negative_index("C_t", "m", m);
            context__.validate_dims("data initialization", "C_t", "matrix_d", context__.to_vec(t,m));
            validate_non_negative_index("C_t", "t", t);
            validate_non_negative_index("C_t", "m", m);
            C_t = matrix_d(static_cast<Eigen::VectorXd::Index>(t),static_cast<Eigen::VectorXd::Index>(m));
            vals_r__ = context__.vals_r("C_t");
            pos__ = 0;
            size_t C_t_m_mat_lim__ = t;
            size_t C_t_n_mat_lim__ = m;
            for (size_t n_mat__ = 0; n_mat__ < C_t_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < C_t_m_mat_lim__; ++m_mat__) {
                    C_t(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }

            // validate, data variables
            current_statement_begin__ = 2;
            current_statement_begin__ = 3;
            current_statement_begin__ = 4;
            current_statement_begin__ = 5;
            current_statement_begin__ = 6;
            current_statement_begin__ = 7;
            current_statement_begin__ = 8;
            current_statement_begin__ = 9;
            // initialize data variables


            // validate transformed data

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 14;
            validate_non_negative_index("mu", "n", n);
            num_params_r__ += n;
            current_statement_begin__ = 15;
            validate_non_negative_index("ss", "n", n);
            num_params_r__ += n;
            current_statement_begin__ = 16;
            validate_non_negative_index("lambda", "n", n);
            num_params_r__ += n;
            current_statement_begin__ = 17;
            ++num_params_r__;
            current_statement_begin__ = 18;
            ++num_params_r__;
            current_statement_begin__ = 19;
            ++num_params_r__;
            current_statement_begin__ = 20;
            ++num_params_r__;
            current_statement_begin__ = 22;
            validate_non_negative_index("p", "n", n);
            num_params_r__ += n;
            current_statement_begin__ = 23;
            ++num_params_r__;
            current_statement_begin__ = 24;
            ++num_params_r__;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~model_subject_trials_covariates() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("mu")))
            throw std::runtime_error("variable mu missing");
        vals_r__ = context__.vals_r("mu");
        pos__ = 0U;
        validate_non_negative_index("mu", "n", n);
        context__.validate_dims("initialization", "mu", "vector_d", context__.to_vec(n));
        vector_d mu(static_cast<Eigen::VectorXd::Index>(n));
        for (int j1__ = 0U; j1__ < n; ++j1__)
            mu(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(mu);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable mu: ") + e.what());
        }

        if (!(context__.contains_r("ss")))
            throw std::runtime_error("variable ss missing");
        vals_r__ = context__.vals_r("ss");
        pos__ = 0U;
        validate_non_negative_index("ss", "n", n);
        context__.validate_dims("initialization", "ss", "vector_d", context__.to_vec(n));
        vector_d ss(static_cast<Eigen::VectorXd::Index>(n));
        for (int j1__ = 0U; j1__ < n; ++j1__)
            ss(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(0,ss);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable ss: ") + e.what());
        }

        if (!(context__.contains_r("lambda")))
            throw std::runtime_error("variable lambda missing");
        vals_r__ = context__.vals_r("lambda");
        pos__ = 0U;
        validate_non_negative_index("lambda", "n", n);
        context__.validate_dims("initialization", "lambda", "vector_d", context__.to_vec(n));
        vector_d lambda(static_cast<Eigen::VectorXd::Index>(n));
        for (int j1__ = 0U; j1__ < n; ++j1__)
            lambda(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(0,lambda);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable lambda: ") + e.what());
        }

        if (!(context__.contains_r("mu_m")))
            throw std::runtime_error("variable mu_m missing");
        vals_r__ = context__.vals_r("mu_m");
        pos__ = 0U;
        context__.validate_dims("initialization", "mu_m", "double", context__.to_vec());
        double mu_m(0);
        mu_m = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(mu_m);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable mu_m: ") + e.what());
        }

        if (!(context__.contains_r("mu_l")))
            throw std::runtime_error("variable mu_l missing");
        vals_r__ = context__.vals_r("mu_l");
        pos__ = 0U;
        context__.validate_dims("initialization", "mu_l", "double", context__.to_vec());
        double mu_l(0);
        mu_l = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(mu_l);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable mu_l: ") + e.what());
        }

        if (!(context__.contains_r("ss_m")))
            throw std::runtime_error("variable ss_m missing");
        vals_r__ = context__.vals_r("ss_m");
        pos__ = 0U;
        context__.validate_dims("initialization", "ss_m", "double", context__.to_vec());
        double ss_m(0);
        ss_m = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,ss_m);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable ss_m: ") + e.what());
        }

        if (!(context__.contains_r("ss_l")))
            throw std::runtime_error("variable ss_l missing");
        vals_r__ = context__.vals_r("ss_l");
        pos__ = 0U;
        context__.validate_dims("initialization", "ss_l", "double", context__.to_vec());
        double ss_l(0);
        ss_l = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,ss_l);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable ss_l: ") + e.what());
        }

        if (!(context__.contains_r("p")))
            throw std::runtime_error("variable p missing");
        vals_r__ = context__.vals_r("p");
        pos__ = 0U;
        validate_non_negative_index("p", "n", n);
        context__.validate_dims("initialization", "p", "vector_d", context__.to_vec(n));
        vector_d p(static_cast<Eigen::VectorXd::Index>(n));
        for (int j1__ = 0U; j1__ < n; ++j1__)
            p(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(p);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable p: ") + e.what());
        }

        if (!(context__.contains_r("alpha")))
            throw std::runtime_error("variable alpha missing");
        vals_r__ = context__.vals_r("alpha");
        pos__ = 0U;
        context__.validate_dims("initialization", "alpha", "double", context__.to_vec());
        double alpha(0);
        alpha = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,alpha);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable alpha: ") + e.what());
        }

        if (!(context__.contains_r("beta")))
            throw std::runtime_error("variable beta missing");
        vals_r__ = context__.vals_r("beta");
        pos__ = 0U;
        context__.validate_dims("initialization", "beta", "double", context__.to_vec());
        double beta(0);
        beta = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,beta);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable beta: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        typedef T__ local_scalar_t__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        try {
            // model parameters
            stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  mu;
            (void) mu;  // dummy to suppress unused var warning
            if (jacobian__)
                mu = in__.vector_constrain(n,lp__);
            else
                mu = in__.vector_constrain(n);

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  ss;
            (void) ss;  // dummy to suppress unused var warning
            if (jacobian__)
                ss = in__.vector_lb_constrain(0,n,lp__);
            else
                ss = in__.vector_lb_constrain(0,n);

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  lambda;
            (void) lambda;  // dummy to suppress unused var warning
            if (jacobian__)
                lambda = in__.vector_lb_constrain(0,n,lp__);
            else
                lambda = in__.vector_lb_constrain(0,n);

            local_scalar_t__ mu_m;
            (void) mu_m;  // dummy to suppress unused var warning
            if (jacobian__)
                mu_m = in__.scalar_constrain(lp__);
            else
                mu_m = in__.scalar_constrain();

            local_scalar_t__ mu_l;
            (void) mu_l;  // dummy to suppress unused var warning
            if (jacobian__)
                mu_l = in__.scalar_constrain(lp__);
            else
                mu_l = in__.scalar_constrain();

            local_scalar_t__ ss_m;
            (void) ss_m;  // dummy to suppress unused var warning
            if (jacobian__)
                ss_m = in__.scalar_lb_constrain(0,lp__);
            else
                ss_m = in__.scalar_lb_constrain(0);

            local_scalar_t__ ss_l;
            (void) ss_l;  // dummy to suppress unused var warning
            if (jacobian__)
                ss_l = in__.scalar_lb_constrain(0,lp__);
            else
                ss_l = in__.scalar_lb_constrain(0);

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  p;
            (void) p;  // dummy to suppress unused var warning
            if (jacobian__)
                p = in__.vector_constrain(n,lp__);
            else
                p = in__.vector_constrain(n);

            local_scalar_t__ alpha;
            (void) alpha;  // dummy to suppress unused var warning
            if (jacobian__)
                alpha = in__.scalar_lb_constrain(0,lp__);
            else
                alpha = in__.scalar_lb_constrain(0);

            local_scalar_t__ beta;
            (void) beta;  // dummy to suppress unused var warning
            if (jacobian__)
                beta = in__.scalar_lb_constrain(0,lp__);
            else
                beta = in__.scalar_lb_constrain(0);


            // transformed parameters



            // validate transformed parameters

            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning

            // model body

            current_statement_begin__ = 29;
            for (int i = 1; i <= n; ++i) {

                current_statement_begin__ = 30;
                lp_accum__.add(normal_log<propto__>(get_base1(mu,i,"mu",1), mu_m, ss_m));
                current_statement_begin__ = 31;
                lp_accum__.add(normal_log<propto__>(get_base1(lambda,i,"lambda",1), mu_l, ss_l));
                current_statement_begin__ = 32;
                lp_accum__.add(beta_log<propto__>(get_base1(p,i,"p",1), alpha, beta));
                current_statement_begin__ = 34;
                for (int j = 1; j <= m; ++j) {

                    current_statement_begin__ = 35;
                    lp_accum__.add(exp_mod_normal_log<propto__>(get_base1(T,i,j,"T",1), get_base1(mu,i,"mu",1), get_base1(ss,i,"ss",1), get_base1(lambda,i,"lambda",1)));
                    current_statement_begin__ = 36;
                    lp_accum__.add(bernoulli_log<propto__>(get_base1(get_base1(S,i,"S",1),j,"S",2), get_base1(p,i,"p",1)));
                }
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("mu");
        names__.push_back("ss");
        names__.push_back("lambda");
        names__.push_back("mu_m");
        names__.push_back("mu_l");
        names__.push_back("ss_m");
        names__.push_back("ss_l");
        names__.push_back("p");
        names__.push_back("alpha");
        names__.push_back("beta");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(n);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;

        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);
        static const char* function__ = "model_subject_trials_covariates_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        vector_d mu = in__.vector_constrain(n);
        vector_d ss = in__.vector_lb_constrain(0,n);
        vector_d lambda = in__.vector_lb_constrain(0,n);
        double mu_m = in__.scalar_constrain();
        double mu_l = in__.scalar_constrain();
        double ss_m = in__.scalar_lb_constrain(0);
        double ss_l = in__.scalar_lb_constrain(0);
        vector_d p = in__.vector_constrain(n);
        double alpha = in__.scalar_lb_constrain(0);
        double beta = in__.scalar_lb_constrain(0);
            for (int k_0__ = 0; k_0__ < n; ++k_0__) {
            vars__.push_back(mu[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < n; ++k_0__) {
            vars__.push_back(ss[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < n; ++k_0__) {
            vars__.push_back(lambda[k_0__]);
            }
        vars__.push_back(mu_m);
        vars__.push_back(mu_l);
        vars__.push_back(ss_m);
        vars__.push_back(ss_l);
            for (int k_0__ = 0; k_0__ < n; ++k_0__) {
            vars__.push_back(p[k_0__]);
            }
        vars__.push_back(alpha);
        vars__.push_back(beta);

        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {



            // validate transformed parameters

            // write transformed parameters
            if (include_tparams__) {
            }
            if (!include_gqs__) return;
            // declare and define generated quantities



            // validate generated quantities

            // write generated quantities
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_subject_trials_covariates";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= n; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "ss" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "lambda" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu_m";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu_l";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "ss_m";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "ss_l";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= n; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "p" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "alpha";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "beta";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
        }


        if (!include_gqs__) return;
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= n; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "ss" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= n; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "lambda" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu_m";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu_l";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "ss_m";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "ss_l";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= n; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "p" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "alpha";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "beta";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
        }


        if (!include_gqs__) return;
    }

}; // model

}

typedef model_subject_trials_covariates_namespace::model_subject_trials_covariates stan_model;


#endif
