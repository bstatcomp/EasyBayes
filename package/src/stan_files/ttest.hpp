/*
    bayes4psy is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    bayes4psy is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with bayes4psy.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.18.0

#include <stan/model/model_header.hpp>

namespace model_ttest_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_ttest");
    reader.add_event(59, 57, "end", "model_ttest");
    return reader;
}

#include <meta_header.hpp>
 class model_ttest : public prob_grad {
private:
    int n;
    vector<double> y;
    vector<int> p_ids;
    vector<double> p_values;
    double eLambda;
public:
    model_ttest(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_ttest(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;

        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_ttest_namespace::model_ttest";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        try {
            current_statement_begin__ = 2;
            context__.validate_dims("data initialization", "n", "int", context__.to_vec());
            n = int(0);
            vals_i__ = context__.vals_i("n");
            pos__ = 0;
            n = vals_i__[pos__++];
            current_statement_begin__ = 3;
            validate_non_negative_index("y", "n", n);
            context__.validate_dims("data initialization", "y", "double", context__.to_vec(n));
            validate_non_negative_index("y", "n", n);
            y = std::vector<double>(n,double(0));
            vals_r__ = context__.vals_r("y");
            pos__ = 0;
            size_t y_limit_0__ = n;
            for (size_t i_0__ = 0; i_0__ < y_limit_0__; ++i_0__) {
                y[i_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 6;
            validate_non_negative_index("p_ids", "2", 2);
            context__.validate_dims("data initialization", "p_ids", "int", context__.to_vec(2));
            validate_non_negative_index("p_ids", "2", 2);
            p_ids = std::vector<int>(2,int(0));
            vals_i__ = context__.vals_i("p_ids");
            pos__ = 0;
            size_t p_ids_limit_0__ = 2;
            for (size_t i_0__ = 0; i_0__ < p_ids_limit_0__; ++i_0__) {
                p_ids[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 7;
            validate_non_negative_index("p_values", "4", 4);
            context__.validate_dims("data initialization", "p_values", "double", context__.to_vec(4));
            validate_non_negative_index("p_values", "4", 4);
            p_values = std::vector<double>(4,double(0));
            vals_r__ = context__.vals_r("p_values");
            pos__ = 0;
            size_t p_values_limit_0__ = 4;
            for (size_t i_0__ = 0; i_0__ < p_values_limit_0__; ++i_0__) {
                p_values[i_0__] = vals_r__[pos__++];
            }

            // validate, data variables
            current_statement_begin__ = 2;
            check_greater_or_equal(function__,"n",n,1);
            current_statement_begin__ = 3;
            current_statement_begin__ = 6;
            for (int k0__ = 0; k0__ < 2; ++k0__) {
                check_greater_or_equal(function__,"p_ids[k0__]",p_ids[k0__],0);
            }
            current_statement_begin__ = 7;
            // initialize data variables
            current_statement_begin__ = 11;
            eLambda = double(0);
            stan::math::fill(eLambda,DUMMY_VAR__);

            current_statement_begin__ = 12;
            stan::math::assign(eLambda, (1 / 29.0));

            // validate transformed data
            current_statement_begin__ = 11;

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 16;
            ++num_params_r__;
            current_statement_begin__ = 17;
            ++num_params_r__;
            current_statement_begin__ = 18;
            ++num_params_r__;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~model_ttest() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("nuMinusOne")))
            throw std::runtime_error("variable nuMinusOne missing");
        vals_r__ = context__.vals_r("nuMinusOne");
        pos__ = 0U;
        context__.validate_dims("initialization", "nuMinusOne", "double", context__.to_vec());
        double nuMinusOne(0);
        nuMinusOne = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,nuMinusOne);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable nuMinusOne: ") + e.what());
        }

        if (!(context__.contains_r("mu")))
            throw std::runtime_error("variable mu missing");
        vals_r__ = context__.vals_r("mu");
        pos__ = 0U;
        context__.validate_dims("initialization", "mu", "double", context__.to_vec());
        double mu(0);
        mu = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(mu);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable mu: ") + e.what());
        }

        if (!(context__.contains_r("sigma")))
            throw std::runtime_error("variable sigma missing");
        vals_r__ = context__.vals_r("sigma");
        pos__ = 0U;
        context__.validate_dims("initialization", "sigma", "double", context__.to_vec());
        double sigma(0);
        sigma = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sigma);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sigma: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        typedef T__ local_scalar_t__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        try {
            // model parameters
            stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);

            local_scalar_t__ nuMinusOne;
            (void) nuMinusOne;  // dummy to suppress unused var warning
            if (jacobian__)
                nuMinusOne = in__.scalar_lb_constrain(0,lp__);
            else
                nuMinusOne = in__.scalar_lb_constrain(0);

            local_scalar_t__ mu;
            (void) mu;  // dummy to suppress unused var warning
            if (jacobian__)
                mu = in__.scalar_constrain(lp__);
            else
                mu = in__.scalar_constrain();

            local_scalar_t__ sigma;
            (void) sigma;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma = in__.scalar_lb_constrain(0,lp__);
            else
                sigma = in__.scalar_lb_constrain(0);


            // transformed parameters
            current_statement_begin__ = 22;
            local_scalar_t__ nu;
            (void) nu;  // dummy to suppress unused var warning

            stan::math::initialize(nu, DUMMY_VAR__);
            stan::math::fill(nu,DUMMY_VAR__);


            current_statement_begin__ = 23;
            stan::math::assign(nu, (nuMinusOne + 1));

            // validate transformed parameters
            if (stan::math::is_uninitialized(nu)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: nu";
                throw std::runtime_error(msg__.str());
            }

            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 22;
            check_greater_or_equal(function__,"nu",nu,0);

            // model body
            {
            current_statement_begin__ = 29;
            int id(0);
            (void) id;  // dummy to suppress unused var warning

            stan::math::fill(id, std::numeric_limits<int>::min());
            stan::math::assign(id,1);


            current_statement_begin__ = 30;
            if (as_bool(logical_eq(get_base1(p_ids,id,"p_ids",1),1))) {

                current_statement_begin__ = 31;
                lp_accum__.add(uniform_log<propto__>(mu, get_base1(p_values,((id * 2) - 1),"p_values",1), get_base1(p_values,(id * 2),"p_values",1)));
            } else if (as_bool(logical_eq(get_base1(p_ids,id,"p_ids",1),2))) {

                current_statement_begin__ = 33;
                lp_accum__.add(normal_log<propto__>(mu, get_base1(p_values,((id * 2) - 1),"p_values",1), get_base1(p_values,(id * 2),"p_values",1)));
            } else if (as_bool(logical_eq(get_base1(p_ids,id,"p_ids",1),3))) {

                current_statement_begin__ = 35;
                lp_accum__.add(gamma_log<propto__>(mu, get_base1(p_values,((id * 2) - 1),"p_values",1), get_base1(p_values,(id * 2),"p_values",1)));
            } else if (as_bool(logical_eq(get_base1(p_ids,id,"p_ids",1),4))) {

                current_statement_begin__ = 37;
                lp_accum__.add(beta_log<propto__>(mu, get_base1(p_values,((id * 2) - 1),"p_values",1), get_base1(p_values,(id * 2),"p_values",1)));
            }
            current_statement_begin__ = 41;
            stan::math::assign(id, 2);
            current_statement_begin__ = 42;
            if (as_bool(logical_eq(get_base1(p_ids,id,"p_ids",1),1))) {

                current_statement_begin__ = 43;
                lp_accum__.add(uniform_log<propto__>(sigma, get_base1(p_values,((id * 2) - 1),"p_values",1), get_base1(p_values,(id * 2),"p_values",1)));
            } else if (as_bool(logical_eq(get_base1(p_ids,id,"p_ids",1),2))) {

                current_statement_begin__ = 45;
                lp_accum__.add(normal_log<propto__>(sigma, get_base1(p_values,((id * 2) - 1),"p_values",1), get_base1(p_values,(id * 2),"p_values",1)));
            } else if (as_bool(logical_eq(get_base1(p_ids,id,"p_ids",1),3))) {

                current_statement_begin__ = 47;
                lp_accum__.add(gamma_log<propto__>(sigma, get_base1(p_values,((id * 2) - 1),"p_values",1), get_base1(p_values,(id * 2),"p_values",1)));
            } else if (as_bool(logical_eq(get_base1(p_ids,id,"p_ids",1),4))) {

                current_statement_begin__ = 49;
                lp_accum__.add(beta_log<propto__>(sigma, get_base1(p_values,((id * 2) - 1),"p_values",1), get_base1(p_values,(id * 2),"p_values",1)));
            }
            current_statement_begin__ = 52;
            lp_accum__.add(exponential_log<propto__>(nuMinusOne, eLambda));
            current_statement_begin__ = 54;
            for (int i = 1; i <= n; ++i) {

                current_statement_begin__ = 55;
                lp_accum__.add(student_t_log<propto__>(get_base1(y,i,"y",1), nu, mu, sigma));
            }
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("nuMinusOne");
        names__.push_back("mu");
        names__.push_back("sigma");
        names__.push_back("nu");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;

        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);
        static const char* function__ = "model_ttest_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double nuMinusOne = in__.scalar_lb_constrain(0);
        double mu = in__.scalar_constrain();
        double sigma = in__.scalar_lb_constrain(0);
        vars__.push_back(nuMinusOne);
        vars__.push_back(mu);
        vars__.push_back(sigma);

        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {
            current_statement_begin__ = 22;
            local_scalar_t__ nu;
            (void) nu;  // dummy to suppress unused var warning

            stan::math::initialize(nu, DUMMY_VAR__);
            stan::math::fill(nu,DUMMY_VAR__);


            current_statement_begin__ = 23;
            stan::math::assign(nu, (nuMinusOne + 1));

            // validate transformed parameters
            current_statement_begin__ = 22;
            check_greater_or_equal(function__,"nu",nu,0);

            // write transformed parameters
            if (include_tparams__) {
        vars__.push_back(nu);
            }
            if (!include_gqs__) return;
            // declare and define generated quantities



            // validate generated quantities

            // write generated quantities
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_ttest";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "nuMinusOne";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "nu";
            param_names__.push_back(param_name_stream__.str());
        }


        if (!include_gqs__) return;
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "nuMinusOne";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "nu";
            param_names__.push_back(param_name_stream__.str());
        }


        if (!include_gqs__) return;
    }

}; // model

}

typedef model_ttest_namespace::model_ttest stan_model;


#endif
